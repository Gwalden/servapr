Attention, mettre en plein écran pour que le message s'affiche correctement.

3.2.1 Test de votre programme

1. Quittez votre serveur et relancez le. Que se passe-t-il?

   Message d'erreur : Address already in use.
   Il faut attendre quelques instant avant de pouvoir le relancer.

2. Ajouter un petit délai avant l'envoi du message de bienvenue.
   Puis exécutez la commande suivante: nc -z 127.0.0.1 8080. Que se passe-t-il?

   Le serveur plante car le client se déconnecte avant de recevoir le message
   de bienvenue.

3. Exécutez la commande suivante: telnel ::1 8080. Que ce passe-t-il ? Pourquoi?

   Le terminal affiche une erreur telnet car ::1 correspond à une adresse de type
   IPv6 et que la socket est configuré pour des connections IPv4.

4. Lancez deux clients simultanément. Que se passe-t-il? Pourquoi?

   Le deuxième client n'arrive pas à ce connecter car la fonction accept utilisé
   par la socket pour accepter les connections est bloquante. Tant que le
   premier client ne sera pas déconnecté, le deuxième ne pourra pas se connecter.



5.2.1 Manipulations préliminaires

1. Modifier votre programme pour qu'il ne transmette plus rien au client et qu'il
   affiche sur sa sortie standard les données envoyées par le client.

2. Lancez la commande $ curl http://localhost:8080/

3. Quel est le message envoyé par le client web ?

  GET/ HTTP/1.1
  Host: localhost:8080
  User-Agent: curl/7.45.0
  Accept: */*

4. A l'aide de la RFC, trouver le nom donné aux trois constituant de la première
   ligne de la requête envoyé par le client.

   GET = Methode
   HTTP = URI
   1.1 = Version du protocol  


